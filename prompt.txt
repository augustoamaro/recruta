Preciso criar uma aplicação que a base dela é essa instrução:

Você é um assistente com nome de RecrutaSmart especializado em analisar e selecionar currículos em formato .PDF.  
Absorva as seguintes variáveis (sempre que encontrar estas palavras, exatamente iguais, assuma o valor posterior ao sinal de =:
“nota_apto” = 7;
“nota_min_sa”=3;
“nota_max_sa”=7;
Sempre que o usuário solicitar o "analise". Siga as diretrizes abaixo para seleção do candidato:
1.	Sempre que digitar menu faça:
2.	1.1.	Liste de forma numerada todas as vagas (esta informação está entre “ “);
3.	Quando não achar nenhum candidato apto a vaga imprima a seguinte mensagem em negrito “Não existe nenhum candidato que atenda aos REQUISITOS desta VAGA.”
4.	Cada arquivo .PDF é um currículo de um candidato único, deve ser analisado;
5.	Não consulte currículos na internet, somente analise os currículos para preencher as vagas solicitadas;
6.	 Conte o número de candidatos selecionados e mostre isso antes ao final do relatório;
7.	Cada requisito para vaga tem um peso de 10, ao final faça a média:
4.1. Sempre que a média for superior a “nota_apto” este candidato está apto;
4.2.Sempre que a média for no intervalo de “nota_min_sa” a “nota_max_sa” este candidato esta semi-apto a função; 
4.3. Sempre que o candidato for considerado apto ou semi-apto imprima os dados pulando uma linha para imprimir o próximo:
- Nome:
- Cidade:
- Estado:
- Telefone:
- Email: 
4.4. Classifique/organize a lista de candidatos aptos por nome deixando este como título para cada candidato;
4.5. Mostre a média de cada candidato apto e semi-apto;
4.6. Separe os aptos dos semi-aptos;
4.7. Não mostre os candidatos com média abaixo de “nota_min_sa”;
8.	Mostre os requisitos para a vaga somente no início da análise, sem mostrar o que cada candidato possui;
9.	Resumo da Analise:
- Após imprimir as análises dos candidatos mostre este resumo;
- Este resumo de conter o número total de candidatos selecionados;
- O Número de candidatos que estão aptos (coloque os nomes dos aptos separando-os por virgula);
- O numero de candidatos que estão semi-aptos (coloque os nomes dos semi-aptos separando-os por virgula);
10.	Sempre que o usuário digitar “analista de manutenção” utilize os requisitos da Vaga de Analista de Manutenção – PCM. 
- Curso técnico em mecânica concluído;
- Graduação em engenharia concluído ou em andamento;
- Vivência e prática em manutenção de linha leve e pesados;
- Inglês Técnico
- Disponibilidade para residir em Itajaí -SC
11.	Sempre que o usuário digitar “mecânico” utilize os requisitos da Vaga de Mecânico
- Realizar manutenção preventiva e corretiva dos equipamentos;
- Auxiliar na análise e identificação de problemas dos equipamentos;
- Realizar reparos, substituição de peças, fazendo ajustes e regulagem;
- Identificar peças / insumos necessários para PCM
12.	Sempre que o usuário digitar “auxiliar de manutenção” utilize os requisitos da Vaga de Auxiliar de Manutenção
- Auxiliar nas manutenções corretivas e preventivas sob a supervisão dos mecânicos.
- Localizar e retirar peças e insumos nos locais de estoque da empresa.
- Interagir com o departamento de suprimentos para identificar as necessidades de materiais adicionais.
- Realizar pedidos de reposição de estoque conforme necessário.
- Coletar informações de horimetro e/ou odômetro dos equipamentos para manutenção programada.
- Manter registros precisos de todas as transações de materiais, incluindo entradas e saídas.
- Comunicar-se de forma eficaz com os mecânicos para garantir que suas necessidades sejam atendidas prontamente.
13.	Sempre que o usuário digitar “auxiliar de escritório” utilize os requisitos da Vaga de Auxiliar de Escritório - Itajaí/SC
- Ensino médio completo;
- Pacote Office;
- Conhecimento em Faturamento.
14.	Sempre que o usuário digitar “turismo” utilize os requisitos da Vaga de TURISMO CORPORATIVO - Itajaí/SC
- Ensino médio completo;
- Pacote Office; 
- Boa comunicação; 
- Disponibilidade de horário;
15.	Sempre que o usuário digitar “motorista basculante” utilize os requisitos da Vaga de Motorista Caminhão Basculante - Porto Alegre
- Carteira Habilitação D ou E;
- Experiência prévia na condução desses modelos de veículos.
16.	Sempre que o usuário digitar “motorista swl” utilize os requisitos da Vaga de Motorista / Operador(a) para Hidrojato / Caminhão PIPA
- Habilitação C, D e/ou E;
- Ensino Médio Completo;
- Vivência e prática em condução de caminhões dentro de áreas urbanas;
- Vivência e prática em caminhão PIPA/HIDROJATO e/ou caminhão tanque, e / ou caminhão coletor de lixo / coletor de entulho, e/ou caminhão de apoio e/ou caminhão betoneira.
17.	Sempre que o usuário digitar “programador” utilize os requisitos da Vaga de Programador da Monkey Branch
- Conhecimento em programação na linguagem PHP;
- Conhecimento em programação na linguagem Python;
- Conhecimento em Inglês;

A idéia é usar Python e Streamlit.
- O usuário irá fazer o upload de vários currículos em PDF.
- A ferramenta irá extrair o texto dos PDFs
- Irá aparecer um menu, igual está na instrução para selecionar a vaga.
- O usuário selecionará a vaga.
- A ferramenta irá análisar com Inteligencia Artificial os pontos que está na instrução.
- O resultado será apresentado.

Aqui tenho um código que faz algo parecido. Mas preciso adaptar para esse negócio:
import streamlit as st
from PyPDF2 import PdfReader
import mysql.connector
from mysql.connector import Error
import openai

# Função para testar a conexão com o banco de dados
# def test_db_connection():
#     try:
#         connection = mysql.connector.connect(
#             host=st.secrets["mysql"]["host"],
#             port=st.secrets["mysql"]["port"],
#             user=st.secrets["mysql"]["user"],
#             password=st.secrets["mysql"]["password"],
#             database=st.secrets["mysql"]["database"]
#         )
#         if connection.is_connected():
#             db_info = connection.get_server_info()
#             st.write(f"Connected to MySQL Server version {db_info}")
#             connection.close()
#     except Error as e:
#         st.write(f"Error while connecting to MySQL: {e}")

# test_db_connection()

# Função de autenticação


def authenticate(username, password):
    try:
        connection = mysql.connector.connect(
            host=st.secrets["mysql"]["host"],
            port=st.secrets["mysql"]["port"],
            user=st.secrets["mysql"]["user"],
            password=st.secrets["mysql"]["password"],
            database=st.secrets["mysql"]["database"]
        )
        cursor = connection.cursor(dictionary=True)
        query = "SELECT * FROM users WHERE username = %s AND password = %s"
        cursor.execute(query, (username, password))
        user = cursor.fetchone()
        cursor.close()
        connection.close()
        if user:
            st.session_state.role = user['role']
            return True
        return False
    except Error as e:
        st.write(f"Error: {e}")
        return False

# Função para obter as instruções e temperatura


def get_instructions():
    try:
        connection = mysql.connector.connect(
            host=st.secrets["mysql"]["host"],
            port=st.secrets["mysql"]["port"],
            user=st.secrets["mysql"]["user"],
            password=st.secrets["mysql"]["password"],
            database=st.secrets["mysql"]["database"]
        )
        cursor = connection.cursor(dictionary=True)
        query = "SELECT * FROM instructions LIMIT 1"
        cursor.execute(query)
        instructions = cursor.fetchone()
        cursor.close()
        connection.close()
        if instructions:
            return instructions['text'], instructions['temperature']
        return "", 0.7
    except Error as e:
        st.write(f"Error: {e}")
        return "", 0.7

# Função para salvar as instruções e temperatura


def save_instructions(text, temperature):
    try:
        connection = mysql.connector.connect(
            host=st.secrets["mysql"]["host"],
            port=st.secrets["mysql"]["port"],
            user=st.secrets["mysql"]["user"],
            password=st.secrets["mysql"]["password"],
            database=st.secrets["mysql"]["database"]
        )
        cursor = connection.cursor()
        query = "REPLACE INTO instructions (id, text, temperature) VALUES (1, %s, %s)"
        cursor.execute(query, (text, temperature))
        connection.commit()
        cursor.close()
        connection.close()
    except Error as e:
        st.write(f"Error: {e}")

# Função para extrair texto de um PDF


def extract_text_from_pdf(pdf_file):
    pdf_reader = PdfReader(pdf_file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

# Função para fazer uma pergunta à API do ChatGPT usando a biblioteca oficial


def ask_chatgpt(question, context, temperature, instructions):
    api_key = st.secrets["openai"]["openai_key"]
    openai.api_key = api_key

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": instructions},
            {"role": "user", "content": f"Context: {context}\n\nPergunta: {question}"}
        ],
        temperature=temperature
    )

    if response and response.choices:
        return response.choices[0].message['content']
    else:
        return "Nenhuma resposta válida foi retornada pela API."

# Interface do Streamlit


def main():
    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False
        st.session_state.role = ""

    if not st.session_state.authenticated:
        st.title("Login")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        if st.button("Login"):
            if authenticate(username, password):
                st.session_state.authenticated = True
                st.rerun()
            else:
                st.error("Usuário ou senha incorretos")
    else:
        if "instructions" not in st.session_state or "temperature" not in st.session_state:
            instructions, temperature = get_instructions()
            st.session_state.instructions = instructions
            st.session_state.temperature = temperature

        st.sidebar.title("Administração")
        if st.session_state.role == "admin":
            st.sidebar.write("Bem-vindo, Administrador")
            st.sidebar.text_area("Instruções", key="instructions", height=300)
            st.sidebar.slider("Temperatura", 0.0, 1.0,
                              st.session_state.temperature, key="temperature")
            if st.sidebar.button("Salvar Instruções"):
                save_instructions(st.session_state.instructions,
                                  st.session_state.temperature)
                st.success("Instruções salvas com sucesso!")
        else:
            st.sidebar.write("Acesso restrito ao administrador")

        st.title("Assistente de Licitações BidsIA")

        # Upload de PDFs
        uploaded_files = st.file_uploader(
            "Upload de PDFs", type=["pdf"], accept_multiple_files=True)

        context = ""
        if uploaded_files:
            for uploaded_file in uploaded_files:
                text = extract_text_from_pdf(uploaded_file)
                context += text

        if "messages" not in st.session_state:
            st.session_state.messages = []

        # Função para enviar mensagem
        def send_message():
            user_message = st.session_state.user_input
            if user_message:
                st.session_state.messages.append(
                    {"role": "user", "content": user_message})

                with st.spinner("O assistente está pensando..."):
                    response = ask_chatgpt(
                        user_message, context, st.session_state.temperature, st.session_state.instructions)

                st.session_state.messages.append(
                    {"role": "assistant", "content": response})
                st.session_state.user_input = ""

        # Função para limpar mensagens
        def clear_messages():
            st.session_state.messages = []

        # Exibir mensagens
        for message in st.session_state.messages:
            if message["role"] == "user":
                st.write(f"**Usuário:** {message['content']}")
            else:
                st.write(f"**Assistente:** {message['content']}")

        # Campo de entrada de mensagem e botões de enviar e limpar
        st.text_input("Digite sua pergunta:",
                      key="user_input", on_change=send_message)
        col1, col2, col3 = st.columns([1, 6, 1])
        with col1:
            st.button("Enviar", on_click=send_message)
        with col2:
            st.button("Limpar Conversa", on_click=clear_messages)


if __name__ == "__main__":
    main()
